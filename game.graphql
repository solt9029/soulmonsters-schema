enum Phase {
  DRAW
  ENERGY
  PUT
  SOMETHING
  BATTLE
  END
}

type Game implements Node {
  id: Int!
  turnUserId: String
  phase: Phase
  winnerUserId: String
  startedAt: DateTime
  endedAt: DateTime
  gameUsers: [GameUser!]!
  gameCards: [GameCard!]!
  gameHistories: [GameHistory!]!
}

type Query {
  game(id: Int!): Game!
  activeGameId: Int
}

type Mutation {
  startGame(deckId: Int!): Game!
  dispatchStartDrawTimeAction(id: Int!, data: StartDrawTimeActionDispatchInput!): Game!
  dispatchStartEnergyTimeAction(id: Int!, data: StartEnergyTimeActionDispatchInput!): Game!
  dispatchStartPutTimeAction(id: Int!, data: StartPutTimeActionDispatchInput!): Game!
  dispatchStartSomethingTimeAction(id: Int!, data: StartSomethingTimeActionDispatchInput!): Game!
  dispatchStartBattleTimeAction(id: Int!, data: StartBattleTimeActionDispatchInput!): Game!
  dispatchStartEndTimeAction(id: Int!, data: StartEndTimeActionDispatchInput!): Game!
  dispatchFinishEndTimeAction(id: Int!, data: FinishEndTimeActionDispatchInput!): Game!
  dispatchPutSoulAction(id: Int!, data: PutSoulActionDispatchInput!): Game!
  dispatchChangeBattlePositionAction(id: Int!, data: ChangeBattlePositionActionDispatchInput!): Game!
  dispatchUseSoulCanonAction(id: Int!, data: UseSoulCanonActionDispatchInput!): Game!
  dispatchSummonMonsterAction(id: Int!, data: SummonMonsterActionDispatchInput!): Game!
  dispatchAttackAction(id: Int!, data: AttackActionDispatchInput!): Game!
  dispatchUseSoulBarrierAction(id: Int!, data: UseSoulBarrierActionDispatchInput!): Game!
}

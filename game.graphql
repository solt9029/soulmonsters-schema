enum Phase {
  DRAW
  ENERGY
  PUT
  SOMETHING
  BATTLE
  END
}

type Game implements Node {
  id: Int!
  turnUserId: String
  phase: Phase
  winnerUserId: String
  startedAt: DateTime
  endedAt: DateTime
  gameUsers: [GameUser!]!
  gameCards: [GameCard!]!
  gameHistories: [GameHistory!]!
}

input ActionPayload {
  targetGameCardIds: [Int!]
  costGameCardIds: [Int!]
  targetGameUserIds: [String!]
}

input DispatchGameActionInput {
  type: ActionType!
  payload: ActionPayload
}

type Query {
  game(id: Int!): Game!
  activeGameId: Int
}

type Mutation {
  startGame(deckId: Int!): Game!
  dispatchGameAction(id: Int!, data: DispatchGameActionInput!): Game!
}
